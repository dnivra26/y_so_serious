{"version":3,"sources":["App.js","serviceWorker.js","index.js","joker.jpg"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setRef","webcam","analyse","asyncToGenerator","regenerator_default","a","mark","_callee","image","detectionsWithExpressions","wrap","_context","prev","next","console","log","setState","expresion","Image","src","getScreenshot","faceapi","withFaceExpressions","sent","length","orderBy","expressions","state","oldImage","stop","timerId","React","createRef","setInterval","_this2","clearInterval","react_default","createElement","className","_this3","getSuccess","joker","react_webcam_default","audio","height","ref","screenshotFormat","width","videoConstraints","facingMode","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"gXAiFeA,sBAtEb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAJFI,OAAS,SAAAC,GACPR,EAAKQ,OAASA,GAEHR,EAQbS,QARaR,OAAAS,EAAA,EAAAT,CAAAU,EAAAC,EAAAC,KAQH,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACRC,QAAQC,IAAI,UACZtB,EAAKuB,SAAS,CAACC,UAAW,MACtBT,EAAQ,IAAIU,OACVC,IAAM1B,EAAKQ,OAAOmB,gBAJhBT,EAAAE,KAAA,EAKgCQ,IAAuBb,GAAOc,sBAL9D,OAKFb,EALEE,EAAAY,KAMRT,QAAQC,IAAIN,GACTA,GAAiE,GAApCA,EAA0Be,SACxD/B,EAAKuB,SACH,CACER,MAAOA,EAAMW,IACbF,UAAWQ,IAAQhB,EAA0B,GAAGiB,YAAa,CAAC,eAAgB,CAAC,SAAS,GAA7E,aAGY,WAAxBjC,EAAKkC,MAAMV,WACVxB,EAAKuB,SAAS,CAACY,SAAUpB,EAAMW,OAf7B,wBAAAR,EAAAkB,SAAAtB,MANRd,EAAKkC,MAAQ,CACXV,UAAW,GACXa,QAAS,MAEXrC,EAAKQ,OAAS8B,IAAMC,YANTvC,wNA4BL4B,IAA+B,iCAC/BA,IAAgC,iCAChCA,IAAgC,iBAChCS,EAASG,YAAY,kBAAMC,EAAKhC,WAAW,KACjDN,KAAKoB,SAAS,CAACc,mJAIf,OADAK,cAAcvC,KAAK+B,MAAMG,SAEvBM,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,aACbF,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,QAAQnB,IAAI,0DAC3BiB,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,QAAQnB,IAAKvB,KAAK+B,MAAMnB,QACvC4B,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,WAAWnB,IAAKvB,KAAK+B,MAAMC,6CAIvC,IAAAW,EAAA3C,KAMP,OACEwC,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,OACbF,EAAA/B,EAAAgC,cAAA,UAAQC,UAAU,cACU,UAAzB1C,KAAK+B,MAAMV,UAAwBrB,KAAK4C,aAAeJ,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,QAAQnB,IAAKsB,MACpFL,EAAA/B,EAAAgC,cAACK,EAAArC,EAAD,CACEsC,OAAO,EACPC,OAAQ,IACRC,IAAKjD,KAAKI,OACV8C,iBAAiB,aACjBC,MAAO,IACPC,iBAfiB,CACvBD,MAAO,IACPH,OAAQ,IACRK,WAAY,UAcRb,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,cAAc1C,KAAK+B,MAAMV,UAAYrB,KAAK+B,MAAMV,UAAY,IAC3EmB,EAAA/B,EAAAgC,cAAA,UAAQa,QAAS,WAAOX,EAAKrC,YAA7B,mBAnEQiD,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAA/B,EAAAgC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.2f9cb786.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as faceapi from 'face-api.js';\nimport Webcam from \"react-webcam\";\nimport orderBy from 'lodash.orderby'\nimport joker from './joker.jpg'\nimport './App.css';\n\nclass App extends Component {\n  setRef = webcam => {\n    this.webcam = webcam;\n  };\n  constructor(){\n    super();\n    this.state = {\n      expresion: \"\",\n      timerId: null\n    }\n    this.webcam = React.createRef();\n  }\n  analyse = async () => {\n    console.log(\"called\");\n    this.setState({expresion: \"\"});\n    var image = new Image();\n    image.src = this.webcam.getScreenshot();\n    const detectionsWithExpressions = await faceapi.detectAllFaces(image).withFaceExpressions();\n    console.log(detectionsWithExpressions)\n    if(detectionsWithExpressions && detectionsWithExpressions.length != 0) {\n      this.setState(\n        {\n          image: image.src,\n          expresion: orderBy(detectionsWithExpressions[0].expressions, ['probability'], ['desc'])[0]['expression']\n        }\n        );\n      if(this.state.expresion == \"neutral\") {\n          this.setState({oldImage: image.src});\n      }\n    }\n  }\n  async componentDidMount(){\n    await faceapi.loadFaceDetectionModel(\"models\")\n    await faceapi.loadFaceExpressionModel(\"models\")\n    await faceapi.loadSsdMobilenetv1Model('models')\n    const timerId =setInterval(() => this.analyse(), 1000);\n    this.setState({timerId});\n  }\n  getSuccess() {\n    clearInterval(this.state.timerId);\n    return (\n      <div className=\"container\">\n        <img className=\"joker\" src=\"https://media.giphy.com/media/KEVNWkmWm6dm8/giphy.gif\" />\n        <img className=\"happy\" src={this.state.image} />\n        <img className=\"nothappy\" src={this.state.oldImage} />\n      </div>\n    )\n  }\n  render() {\n    const videoConstraints = {\n      width: 350,\n      height: 350,\n      facingMode: 'user',\n    };\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {this.state.expresion === \"happy\" ? this.getSuccess() : <img className=\"joker\" src={joker}/>}\n          <Webcam\n            audio={false}\n            height={350}\n            ref={this.setRef}\n            screenshotFormat=\"image/jpeg\"\n            width={350}\n            videoConstraints={videoConstraints}\n          />\n          <div className=\"expression\">{this.state.expresion ? this.state.expresion : \"\"}</div>\n          <button onClick={() => {this.analyse()}} >Detect</button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/joker.89ffae1c.jpg\";"],"sourceRoot":""}